Control Flow

- Sequence
- loop/iterative
    - for loop
        init, cond, post
    - bool (while-ish)
        infinite
    - do-while-ish
        break
    - continue
    - nested
- conditionals
    - switch/case/default statements
        - no default fall-through
        - creating fall-through
        - multiple cases
        - cases can be expressions
            evaluate to true
        - type
    - if
        - the not operator
        - initialization statement
        - if / else
        - if / else if

Documentation
    - golang spec
    - effective go
Terminology
    - lexical elements
    - literal values
    - runes

    rune
        - rune is a character ''
            ex.
                foo := 'a'
                fmt.Println(foo)    // prints 97
        - string: "" ``
        - under lexical element in golang docs
        - an interger value identifying a unicode code point
        - alias for int32
            - 4bytes to 32bits
            - UTF-8 os a 4byte coding scheme
            - with int 32 (4bytes) we have numbers for each of the code points

        - printing UTF-8
        UTF-8: 4 byte coding scheme
            text encoding
            backward compatible with ASCII, characters for Universial characters
    - Lexicon
        -  dictionary
        - made of up of lexical elements
        - Tokens form the vocab of the go lang
            Four Classes:
                Identifiers
                Keywords
                    break, case, const, go, ...
                Operators/Delimiters
                    &, %,
                Literals
                    rune literal represents a rune constant, an integer IDing a Unicode code point

    - String:
        - Collection of characters
